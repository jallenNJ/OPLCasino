Sep 7, 2018:
Design:
	-Spent time playing the card game to learn the rules (1.5 hours)
	Total 1.5 Hours
Writing:
	-Created the required classes .cpp and .h files(Card, Computer, Deck, Human, Player, Round, Tournanment) and Casino.cpp which contains the main() (.5 hours)
	-Added basic Round loop, which creates the tornament objects, which then starts a round object. That round object will flip a coin, intialize counter vars, then wait for the round to complete (not implemented) (1 hour)
	-Implemented logic to end the torunament when one or both players reach 21 points, and outputs who won (.1 hours)
	-Implemented Card Class skeleton so a card can keep track of its suit and symbol (.1 hours)
	-Implemented the skeleton of the Deck class, which is resposnbible for creating all 52 cards, storing them in a vector. Once there, it has the ability to shuffle the deck, and draw the top card. (1 hour)
	-Edited output logic for coin flip to be more clear (.1 hour)
	-Designed and implemented a Table class to handle the per cycle (Each player playing a card) logic which is managed by the Round class. This implementation kept track of both hands, piles, and the loose cards on table. (1.5 hours)
	
	Total: 3.8 hours
	
Day Total: 5.2 hours

Sep 8, 2018:
	-Made the Player class pure virtual and allowed for a Human object to ask and set its name in the overloaded setName() function. The computer class overloads the same function and sets to the same string(.5 hours)
	-Editied the Card's class toString() function to remove garbage data that occasionally got picked up (.1 hours)
	-Implemented the board's printBoard() function. This function outputs both player's name, their hands, and the cards on the table (.5 hours)
	-Editied logic for coinflip in the Round class by forcing to lowercase, and therefore simplifying the if, else checks. In addition, the program now flushes STDIN to improve handling of bad user input (.5 hours)
	-Redesigned the hierarchy for the Player class inheritence. 
		Former method was to have each child class respond with overloaded function to a non-virtual public parent function.
		New design is to have that function be pure virtual, and each child having full control over the implmentation, and then having non-virtual validator functions to ensure both abide by the same rules.
	(.5 hours for this section)
	-Edited code in Table and Human for better readbility and useability:
		In Table, the player hands are stored in an array instead of seperate variables to allow for looping instead of hardcoding each one
		In human, the Action enums (Caputre, Build,Trail) were moved to the parent class so the AI class can use them when implemented.
	(.5 hours for this section)
Day total: 2.6 hours 

Sep 9, 2018:
	-Implemented the ability to capture cards of the same symbol:
		Changed the doTurn signatre (in Player) to to vector<Card> instead of a single int, this is to allow for the Player logic to see the cards
		Card class has a function [checkCapture(Card)] to check if a target card can capture it
		Human class doTurn overload recieved a skeleton implementation:
			Prompts the user for which action they want to take, (Capture, Build, or trail)
			Ask what card in their hand they want to play.
			Ask what card they want to select on the table.
			Then use a switch statement to handle the three action cases
			
		Above took 2.5 hours
	-Editied code through program to fix compiler warnings for intened casts that may cause issues:
		Such as using a signed int i to loop through a vector. This got changed to an unsigned int
		Explictly casted the srand seed to unsigned int
	Above took .2 hours
	
	-Implemented function symbolToNumericValue() in the card class so cards can convert the face symbol to numeric representation. (.1 hours)
	
	-Edited all getters through the program to be const to confirm to coding standards (.1 hours)
	
	- Implemented abilty to select multiple cards on the table
		Card class got another checkCapture overload that accepts a vector of Cards
		Player class implemented a new non-virtual function to validate selections from both child classes
		Human changed it gets input functions to receive a vector of ints instead of a single int to handle this 
	Above took .5 hours
	
	- Edited Human's promptForCardToUse(int, bool) to keep track of previous inputs and prevent the user from inputting the same card .5 hours
	
	-Testing to ensure that capturing cards works as intended for Human:
		* Capturing identical Card: Works
		* Capturing all identical Cards: Not working
		* Capturing a set: Works
		* Denying a capture on an incorrect set: Works
		* Error handling on a user not inputing a valid action: Works
		* Error handling on a user not inputing a valid number: Works
	Above took 1 hour
Day total: 4.9 hours

Sep 10th, 2018:
	- Created build class, and have it add cards to the build with no logic checking .2 hours
	- Trailing implemented with no error checking .1 hours
	- Debugged an error with indices not lining up with the displayed indices
		This was caused by an errornious call in Human which pre emptively removed the card before all input was taken.
		Above took .4 hours (.3 hours to identify and .1 hours to fix)
	Day total .7 hours
		
	
Sep 11th, 2018:
	- Edited Table class to have the player piles in a parrell array to the hand array .2 hours
	- Moved hands and pile from the table class to the player class after speaking to you in your office.
		All logic for adding and removing from hand was removed from the table class
		FillHand() in table now passes the drawn card to the appropriate player object to handle storing the card
		Implemented a default constructor to the card class that sets it to an intialized error value if called
		Implemented a toFormattedString function to the Player class which returns the cards in the hand with their index value
		Converted the caputre and trail in Player to use the new member variables
		
	Above took 2.5 hours
	
	-(Resolved a merge conflict between the version on my laptop and desktop. This reminded me to always sync with the repo before programming .2 hours
	
	- Converted all output in all classes to use a static class (Client) to handle outputs and inputs.
		For outputs, client provides and outputString function, which outputs a string to cout, and a outputError function which outputs a string to cerr.
		Client also provides ability to get input of types: char, string, and ints.
			The program can also apply these constraints to the inputs:
				Chars: Have to be on the valid selection list, and can force to lowercase
				ints: Have to be on a continous range.
		Above took 2 hours
	-Edited all mutators to now return a bool instead of void to abide by coding standards .3 hours
	Day total: 5.2 hours
Sep 12th, 2018:
	Edited Build::addCardToBuild to ensure the card is valid (does not exceed 14) .1 hour
	(Resolved another merge conflicts between computers, and this time learning my lesson) .5 hours
	-Implemented builds to work in ideal conditions only, where the Player has the correct card in hand, and the card they played sums to the target value (.2 hours)
	
	-Failed to implement merging of the builds into the normal card vector with polymorphism. At the end of this endevour I incorrectly identifed the issue was with inheritence. The actual issue was with object slicing in the containing data structure. 1 hour
	
	-Added new class PlayingCard which inheriets from Card. This was after speaking with you and you saying this would be a better implementation. This class will eventually take the role of Card, and Card will become pure virtual. (.2 hours)
	Day Total 1.9 hours
Sep 13th, 2018
	-Fixed an error with the Build's class toString function not displaying the formatting correctly .1 hour
	-Created a hand class, and moved all the card vectors into the class, with accessors to handle the data. .5 hours
	- When a player creates a build, that card becomes reserved in their hand, which the Player's hand manages, and will prevent it from being used in a trail .5 hours
	-Spilt the fuction code Player::Check trail into two functions	
		checkResereved which checks if the provided card is resereved
		and checkTrail now returns the opposite of what the helper function returns
		This allows for the code to be reused in other functions which need to know if the card is resereved
	Above took .2 hours
	-Edited builds to be identifed by the player name string instead of by an index
		This is due to every class having seperate indexing schemes which are not guareenteed to always be identical
	Above took .2 hours 
	Day Toal 1 hour
Sep 14th, 2018

	-Debugged why builds toString function was not being correctly used (per Sep 12ths log) was caused by object slicing on the parent object. After speaking with you in your office, implemented your solution of moving the owner information to the parent class, so it is visible, and the owner for the cards is who played them 
		Took 1 hour total. .7 hours to debug the issue, .3 to implement solution
	
	Implemented multi builds in an untested state
		The reason they are untested is there is no proper way to test them until serialization is implemented.
		However, as they use the same class, and it is two builds instead of two cards, the overrall idea will work, however the edge cases may be office
		Above took .5 hours
		
	-Editied the table class to respect the coin flip in the round class .1 hour
	
	-Removed commented out code in the Table class which was left over from the move to the Player classes (Sep 11th log) .1 hour
	
	Day total 1.6 hours
